// Generated by dts-bundle-generator v4.3.0

/// <reference types="node" />

import { FsLogger } from '@flagship.io/js-sdk-logs';
import { CancelTokenSource } from 'axios';
import { EventEmitter } from 'events';

export declare type FlagshipModification = string | boolean | number | null | Array<any> | {
	[key: string]: any;
};
export declare type FlagshipVisitorContext = {
	[key: string]: boolean | number | string;
};
export declare type FsModifsRequestedList = Array<{
	key: string;
	defaultValue: FlagshipModification;
	activate?: boolean;
}>;
export declare type DecisionApiResponse = {
	data: DecisionApiResponseData;
	status: number;
};
export declare type DecisionApiSimpleResponse = {
	[key: string]: FlagshipModification;
};
export declare type DecisionApiResponseData = {
	visitorId: string;
	campaigns: DecisionApiCampaign[];
	panic?: boolean;
};
export declare type GetModificationInfoOutput = {
	campaignId: string;
	isReference: boolean;
	variationId: string;
	variationGroupId: string;
};
export declare type GetModificationsOutput = {
	[key: string]: FlagshipModification;
};
export declare type DecisionApiCampaign = {
	id: string;
	variationGroupId: string;
	variation: {
		id: string;
		reference?: boolean;
		modifications: {
			type: string;
			value: {
				[key: string]: FlagshipModification;
			};
		};
	};
};
export declare type ActivatedArchived = {
	variationId: Array<string>;
	variationGroupId: Array<string>;
};
export declare type ModificationsInternalStatus = {
	[key: string]: {
		value: Array<string>;
		type: Array<string>;
		campaignId: Array<string>;
		variationId: Array<string>;
		variationGroupId: Array<string>;
		activated: ActivatedArchived;
	};
};
export declare type HitShape = {
	type: 'Screen';
	data: ScreenHit;
} | {
	type: 'ScreenView';
	data: ScreenHit;
} | {
	type: 'Transaction';
	data: TransactionHit;
} | {
	type: 'Item';
	data: ItemHit;
} | {
	type: 'Event';
	data: EventHit;
};
export declare type TransactionHit = CommonHit & {
	transactionId: string;
	affiliation: string;
	totalRevenue?: number;
	shippingCost?: number;
	shippingMethod?: string;
	taxes?: number;
	currency?: string;
	paymentMethod?: string;
	itemCount?: number;
	couponCode?: string;
	documentLocation?: string;
	pageTitle?: string;
};
export declare type ItemHit = CommonHit & {
	transactionId: string;
	name: string;
	price?: number;
	code?: string;
	category?: string;
	quantity?: number;
	documentLocation?: string;
	pageTitle?: string;
};
export declare type EventHit = CommonHit & {
	category: 'Action Tracking' | 'User Engagement';
	action: string;
	label?: string;
	value?: number;
	documentLocation?: string;
	pageTitle?: string;
};
export declare type ScreenHit = CommonHit & {
	documentLocation: string;
	pageTitle: string;
};
export declare type CommonHit = {
	protocolVersion?: string;
	userIp?: string;
	documentReferrer?: string;
	viewportSize?: string;
	screenResolution?: string;
	documentEncoding?: string;
	screenColorDepth?: string;
	userLanguage?: string;
	javaEnabled?: string;
	flashVersion?: string;
	queueTime?: string;
	currentSessionTimeStamp?: string;
	sessionNumber?: string;
};
export declare type BucketingApiResponse = {
	campaigns: BucketingCampaign[];
	panic: boolean;
	lastModifiedDate: string;
};
export declare type BucketingCampaign = {
	id: string;
	type: string;
	variationGroups: BucketingVariationGroups[];
};
export declare type BucketingVariationGroups = {
	id: string;
	targeting: {
		targetingGroups: BucketingTargetingGroups[];
	};
	variations: BucketingVariation[];
};
export declare type BucketingVariation = {
	id: string;
	modifications: {
		type: string;
		value: {
			[key: string]: null | string;
		};
	};
	allocation: number;
	reference: boolean;
};
export declare type BucketingTargetingGroups = {
	targetings: BucketingTargetings[];
};
export declare type BucketingTargetings = {
	operator: BucketingOperator;
	key: string | 'fs_all_users' | 'fs_users';
	value: BucketingTypes;
};
export declare type BucketingOperator = 'EQUALS' | 'NOT_EQUALS' | 'LOWER_THAN' | 'LOWER_THAN_OR_EQUALS' | 'GREATER_THAN' | 'GREATER_THAN_OR_EQUALS' | 'STARTS_WITH' | 'ENDS_WITH' | 'CONTAINS' | 'NOT_CONTAINS';
export declare type BucketingTypes = string | string[] | number | number[] | boolean | boolean[];
export declare type SetPanicModeToOptions = {
	sendLogs: boolean;
};
export declare type PostFlagshipApiCallback = (axiosCallback: () => Promise<any>, cancelTokenSource: CancelTokenSource, config: FlagshipSdkConfig) => Promise<any>;
export declare type FlagshipSdkConfig = {
	fetchNow?: boolean;
	pollingInterval?: number | null;
	activateNow?: boolean;
	enableConsoleLogs?: boolean;
	decisionMode?: 'API' | 'Bucketing';
	nodeEnv?: string;
	flagshipApi?: string;
	apiKey?: string | null;
	initialModifications?: DecisionApiCampaign[] | null;
	initialBucketing?: BucketingApiResponse | null;
	timeout?: number;
	internal?: {
		react?: {};
		reactNative?: {
			httpCallback?: PostFlagshipApiCallback;
		};
	};
};
export declare type SaveCacheArgs = {
	modifications: {
		before: DecisionApiCampaign[] | null;
		after: DecisionApiCampaign[] | null;
	};
	saveInCacheModifications(modificationsToSaveInCache: DecisionApiCampaign[] | null): void;
};
export interface IFsPanicMode {
	enabled: boolean;
	beginDate: Date | null;
	log: FsLogger;
	setPanicModeTo(value: boolean, options?: SetPanicModeToOptions): void;
	checkPanicMode(response: DecisionApiResponseData | BucketingApiResponse): void;
	shouldRunSafeMode(functionName: string, options?: {
		logType: 'debug' | 'error';
	}): boolean;
}
export interface IFlagshipBucketingVisitor {
	data: BucketingApiResponse | null;
	computedData: DecisionApiResponseData | null;
	log: FsLogger;
	envId: string;
	config: FlagshipSdkConfig;
	visitorId: string;
	visitorContext: FlagshipVisitorContext;
	global: IFlagshipBucketing;
	getEligibleCampaigns(): DecisionApiCampaign[];
	updateCache(): boolean;
	updateVisitorContext(newContext: FlagshipVisitorContext): void;
}
export interface IFlagshipBucketing extends EventEmitter {
	data: BucketingApiResponse | null;
	log: FsLogger;
	envId: string;
	panic: IFsPanicMode;
	isPollingRunning: boolean;
	config: FlagshipSdkConfig;
	lastModifiedDate: string | null;
	callApi(): Promise<BucketingApiResponse | void>;
	startPolling(): void;
	stopPolling(): void;
	on(event: 'launched', listener: ({ status: number }: {
		status: any;
	}) => void): this;
	on(event: 'error', listener: (args: Error) => void): this;
}
export interface IFlagshipVisitor extends EventEmitter {
	config: FlagshipSdkConfig;
	id: string;
	log: FsLogger;
	envId: string;
	panic: IFsPanicMode;
	context: FlagshipVisitorContext;
	isAllModificationsFetched: boolean;
	bucket: IFlagshipBucketingVisitor | null;
	fetchedModifications: DecisionApiCampaign[] | null;
	modificationsInternalStatus: ModificationsInternalStatus | null;
	activateModifications(modifications: Array<{
		key: string;
		variationId?: string;
		variationGroupId?: string;
	}>): void;
	getModifications(modificationsRequested: FsModifsRequestedList, activateAllModifications?: boolean): GetModificationsOutput;
	getModificationInfo(key: string): Promise<null | GetModificationInfoOutput>;
	updateContext(context: FlagshipVisitorContext): void;
	synchronizeModifications(activate?: boolean): Promise<number>;
	getModificationsForCampaign(campaignId: string, activate?: boolean): Promise<DecisionApiResponse>;
	getAllModifications(activate?: boolean, options?: {
		force?: boolean;
		simpleMode?: boolean;
	}): Promise<DecisionApiResponse | DecisionApiSimpleResponse>;
	sendHit(hitData: HitShape): Promise<void>;
	sendHits(hitsArray: Array<HitShape>): Promise<void>;
	on(event: 'ready', listener: () => void): this;
	on(event: 'saveCache', listener: (args: SaveCacheArgs) => void): this;
}
export interface IFlagship {
	config: FlagshipSdkConfig;
	log: FsLogger;
	panic: IFsPanicMode;
	envId: string;
	eventEmitter: EventEmitter;
	bucket: IFlagshipBucketing | null;
	newVisitor(id: string, context: FlagshipVisitorContext): IFlagshipVisitor;
	startBucketingPolling(): {
		success: boolean;
		reason?: string;
	};
	stopBucketingPolling(): {
		success: boolean;
		reason?: string;
	};
}
export interface FlagshipNodeSdk {
	start(envId: string, apiKeyOrSettings?: any, config?: FlagshipSdkConfig): IFlagship;
}
declare const _default: FlagshipNodeSdk;
export default _default;

export {};
