"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useFlagship = exports.useFsModifications = exports.useFsActivate = void 0;
var react_1 = require("react");
var FlagshipContext_1 = __importDefault(require("./FlagshipContext"));
var reportNoVisitor = function (log) {
    if (log) {
        log.error('sdk not correctly initialized... Make sure fsVisitor is ready.');
    }
};
var safeModeLog = function (log, functionName) {
    if (log) {
        log.error(functionName + " is disabled because the SDK is in safe mode.");
    }
};
exports.useFsActivate = function (modificationKeys, applyEffectScope) {
    if (applyEffectScope === void 0) { applyEffectScope = []; }
    var _a = react_1.useContext(FlagshipContext_1.default), state = _a.state, hasError = _a.hasError;
    react_1.useEffect(function () {
        var fsVisitor = state.fsVisitor;
        if (hasError) {
            return safeModeLog(state.log, 'UseFsActivate');
        }
        if (!fsVisitor) {
            reportNoVisitor(state.log);
        }
        else {
            fsVisitor.activateModifications(modificationKeys.map(function (key) { return ({ key: key }); }));
        }
        return undefined;
    }, applyEffectScope);
};
var safeMode_getCacheModifications = function (modificationsRequested, activateAllModifications) {
    if (activateAllModifications === void 0) { activateAllModifications = false; }
    return modificationsRequested.reduce(function (reducer, modifRequested) {
        var newReducer = __assign({}, reducer);
        newReducer[modifRequested.key] = modifRequested.defaultValue;
        return newReducer;
    }, {});
};
var getCacheModifications = function (fsVisitor, modificationsRequested, activateAllModifications, log) {
    if (activateAllModifications === void 0) { activateAllModifications = false; }
    if (!fsVisitor) {
        if (log) {
            log.warn('fsVisitor not initialized, returns default value');
        }
        return safeMode_getCacheModifications(modificationsRequested, activateAllModifications);
    }
    return fsVisitor.getModifications(modificationsRequested, activateAllModifications);
};
exports.useFsModifications = function (modificationsRequested, activateAllModifications) {
    if (activateAllModifications === void 0) { activateAllModifications = false; }
    var _a = react_1.useContext(FlagshipContext_1.default), _b = _a.state, fsVisitor = _b.fsVisitor, log = _b.log, hasError = _a.hasError;
    if (hasError) {
        return safeMode_getCacheModifications(modificationsRequested, activateAllModifications);
    }
    return getCacheModifications(fsVisitor, modificationsRequested, activateAllModifications, log);
};
exports.useFlagship = function (options) {
    var computedOptions = options
        ? options
        : {
            modifications: { requested: [], activateAll: false }
        };
    var _a = computedOptions.modifications, modificationsRequested = _a.requested, _b = _a.activateAll, activateAllModifications = _b === void 0 ? false : _b;
    var _c = react_1.useContext(FlagshipContext_1.default), hasError = _c.hasError, setState = _c.setState, _d = _c.state, fsSdk = _d.fsSdk, fsVisitor = _d.fsVisitor, status = _d.status, log = _d.log;
    if (hasError) {
        return {
            modifications: safeMode_getCacheModifications(modificationsRequested, activateAllModifications),
            status: status,
            synchronizeModifications: function (activate) {
                if (activate === void 0) { activate = false; }
                safeModeLog(log, 'synchronizeModifications');
                return new Promise(function (resolve) { return resolve(400); });
            },
            getModificationInfo: function () {
                safeModeLog(log, 'getModificationInfo');
                return new Promise(function (resolve) { return resolve(null); });
            },
            startBucketingPolling: function () {
                safeModeLog(log, 'startBucketingPolling');
                return {
                    success: false,
                    reason: 'Safe mode enabled'
                };
            },
            stopBucketingPolling: function () {
                safeModeLog(log, 'startBucketingPolling');
                return {
                    success: false,
                    reason: 'Safe mode enabled'
                };
            },
            hit: {
                send: function () {
                    safeModeLog(log, 'send hit');
                },
                sendMultiple: function () {
                    safeModeLog(log, 'send multiple hits');
                }
            }
        };
    }
    var logSdkNotReady = function () {
        if (log) {
            log.error('SDK not ready yet.');
        }
    };
    var send = function (hit) {
        if (fsVisitor && fsVisitor.sendHit) {
            fsVisitor.sendHit(hit);
        }
        else {
            logSdkNotReady();
        }
    };
    var sendMultiple = function (hits) {
        if (fsVisitor && fsVisitor.sendHits) {
            fsVisitor.sendHits(hits);
        }
        else {
            logSdkNotReady();
        }
    };
    var synchronizeModifications = function (activate) {
        if (activate === void 0) { activate = false; }
        if (fsVisitor && fsVisitor.synchronizeModifications) {
            return fsVisitor.synchronizeModifications(activate).then(function (data) {
                if (setState) {
                    setState(function (s) { return (__assign(__assign({}, s), { fsModifications: fsVisitor.fetchedModifications })); });
                }
                return data;
            });
        }
        logSdkNotReady();
        return new Promise(function (resolve) { return resolve(405); });
    };
    send.bind(fsVisitor);
    sendMultiple.bind(fsVisitor);
    return {
        synchronizeModifications: synchronizeModifications,
        modifications: getCacheModifications(fsVisitor, modificationsRequested, activateAllModifications, log),
        getModificationInfo: function (key) {
            return fsVisitor !== null
                ? fsVisitor.getModificationInfo(key)
                : new Promise(function (resolve) { return resolve(null); });
        },
        startBucketingPolling: function () {
            if (fsSdk) {
                return fsSdk.startBucketingPolling();
            }
            if (log) {
                log.error('startBucketingPolling not ready yet.');
            }
            return {
                success: false,
                reason: 'startBucketingPolling not ready yet.'
            };
        },
        stopBucketingPolling: function () {
            if (fsSdk) {
                return fsSdk.stopBucketingPolling();
            }
            if (log) {
                log.error('stopBucketingPolling not ready yet.');
            }
            return {
                success: false,
                reason: 'startBucketingPolling not ready yet.'
            };
        },
        status: status,
        hit: {
            send: send,
            sendMultiple: sendMultiple
        }
    };
};
//# sourceMappingURL=FlagshipHooks.js.map