import React, { ErrorInfo } from 'react';
import { FsLogger } from '@flagship.io/js-sdk-logs';
import { FlagshipReactSdkConfig } from './FlagshipContext';
declare type State = {
    error: Error | null;
    errorInfo: ErrorInfo | null;
    isCollapse: boolean;
};
export declare type HandleErrorBoundaryDisplay = (props: {
    debugMode: boolean;
    children: React.ReactNode;
    isCollapse: boolean;
    error: Error | null;
    onClickCollapse(): void;
}) => React.ReactNode;
declare type Props = {
    children: React.ReactNode;
    handleDisplay?: HandleErrorBoundaryDisplay;
    customerChildren: React.ReactNode;
    onError(error: Error): void;
    error: Error | null;
    sdkSettings: FlagshipReactSdkConfig;
    log: FsLogger;
};
declare class FlagshipErrorBoundary extends React.Component<Props, State> {
    constructor(props: Props);
    componentDidCatch(error: Error, errorInfo: ErrorInfo): void;
    static getDerivedStateFromError(error: Error): {
        error: Error;
    };
    componentDidUpdate(prevProps: Props, prevState: State): void;
    render(): React.ReactNode;
}
export default FlagshipErrorBoundary;
