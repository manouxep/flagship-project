"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useFlagshipContext = exports.FlagshipConsumer = exports.FlagshipProvider = exports.initState = void 0;
var react_1 = __importStar(require("react"));
var js_sdk_1 = __importDefault(require("@flagship.io/js-sdk"));
var use_ssr_1 = __importDefault(require("use-ssr"));
var loggerHelper_1 = __importDefault(require("./lib/loggerHelper"));
var FlagshipErrorBoundary_1 = __importDefault(require("./FlagshipErrorBoundary"));
var utils_1 = require("./lib/utils");
exports.initState = {
    fsSdk: null,
    fsVisitor: null,
    log: null,
    fsModifications: null,
    status: {
        isLoading: true,
        isSdkReady: false,
        isVisitorDefined: false,
        firstInitSuccess: null,
        lastRefresh: null,
        hasError: false
    },
    private: {
        previousFetchedModifications: undefined
    }
};
var FlagshipContext = react_1.default.createContext({ state: __assign({}, exports.initState), setState: null, hasError: false });
exports.FlagshipProvider = function (_a) {
    var children = _a.children, reactNative = _a.reactNative, envId = _a.envId, visitorData = _a.visitorData, loadingComponent = _a.loadingComponent, initialModifications = _a.initialModifications, initialBucketing = _a.initialBucketing, onSavingModificationsInCache = _a.onSavingModificationsInCache, onInitStart = _a.onInitStart, onInitDone = _a.onInitDone, onBucketingSuccess = _a.onBucketingSuccess, onBucketingFail = _a.onBucketingFail, onUpdate = _a.onUpdate, timeout = _a.timeout, fetchNow = _a.fetchNow, activateNow = _a.activateNow, enableConsoleLogs = _a.enableConsoleLogs, enableErrorLayout = _a.enableErrorLayout, enableSafeMode = _a.enableSafeMode, nodeEnv = _a.nodeEnv, flagshipApi = _a.flagshipApi, apiKey = _a.apiKey, decisionMode = _a.decisionMode, pollingInterval = _a.pollingInterval;
    var id = visitorData.id, context = visitorData.context;
    var _b = use_ssr_1.default(), isBrowser = _b.isBrowser, isServer = _b.isServer, isNative = _b.isNative;
    var isJest = utils_1.areWeTestingWithJest();
    var extractConfiguration = function () {
        var configV2 = {
            fetchNow: typeof fetchNow !== 'boolean' ? true : fetchNow,
            decisionMode: decisionMode || 'API',
            pollingInterval: pollingInterval || null,
            activateNow: typeof activateNow !== 'boolean' ? false : activateNow,
            timeout: typeof timeout !== 'number' ? undefined : timeout,
            enableConsoleLogs: typeof enableConsoleLogs !== 'boolean' ? false : enableConsoleLogs,
            enableErrorLayout: typeof enableErrorLayout !== 'boolean' ? false : enableErrorLayout,
            enableSafeMode: typeof enableSafeMode !== 'boolean' ? false : enableSafeMode,
            nodeEnv: nodeEnv || 'production',
            initialBucketing: initialBucketing || null,
            flagshipApi: flagshipApi,
            apiKey: apiKey
        };
        return configV2;
    };
    var configuration = extractConfiguration();
    var _c = react_1.useState(__assign(__assign({}, exports.initState), { log: loggerHelper_1.default.getLogger(configuration), config: configuration, private: __assign(__assign({}, exports.initState.private), { previousFetchedModifications: initialModifications }) })), state = _c[0], setState = _c[1];
    var _d = react_1.useState({ hasError: false, error: null }), errorData = _d[0], setError = _d[1];
    var _e = state.status, isLoading = _e.isLoading, isVisitorDefined = _e.isVisitorDefined, firstInitSuccess = _e.firstInitSuccess, lastRefresh = _e.lastRefresh, fsVisitor = state.fsVisitor;
    var tryCatchCallback = function (callback) {
        try {
            callback();
        }
        catch (error) {
            state.log.fatal("error: " + error.stack);
            setError({ error: error, hasError: true });
        }
    };
    var computeConfig = function () {
        var sdkConfig = {
            internal: {
                react: {},
                reactNative: {
                    httpCallback: reactNative === null || reactNative === void 0 ? void 0 : reactNative.httpCallback
                }
            }
        };
        if (Array.isArray(state.private.previousFetchedModifications)) {
            return __assign(__assign(__assign({}, configuration), sdkConfig), { initialModifications: __spreadArrays(state.private.previousFetchedModifications) });
        }
        if (state.private.previousFetchedModifications) {
            state.log.warn('initialModifications props is not correctly set and has been ignored, please check the documentation.');
        }
        return __assign(__assign({}, configuration), sdkConfig);
    };
    var computedConfig = computeConfig();
    var handleErrorDisplay = reactNative === null || reactNative === void 0 ? void 0 : reactNative.handleErrorDisplay;
    var initSdk = function (previousBucketing) {
        var theApiKey = computedConfig.apiKey, otherComputedConfig = __rest(computedConfig, ["apiKey"]);
        return js_sdk_1.default.start(envId, theApiKey, __assign(__assign({}, otherComputedConfig), { fetchNow: isServer ? false : otherComputedConfig.fetchNow, initialBucketing: computedConfig.initialBucketing === null ? previousBucketing : computedConfig.initialBucketing }));
    };
    var postInitSdkForClientSide = function (fsSdk) {
        var _a, _b, _c;
        fsSdk.eventEmitter.on('bucketPollingSuccess', function (_a) {
            var status = _a.status, payload = _a.payload;
            if (onBucketingSuccess) {
                onBucketingSuccess({ status: status.toString(), payload: payload });
            }
        });
        fsSdk.eventEmitter.on('bucketPollingFailed', function (error) {
            if (onBucketingFail) {
                onBucketingFail(error);
            }
        });
        var visitorInstance;
        var newVisitorDetected = true;
        if (onInitStart && !isVisitorDefined) {
            tryCatchCallback(onInitStart);
        }
        if ((state === null || state === void 0 ? void 0 : state.fsVisitor) && state.fsVisitor.envId === fsSdk.envId && state.fsVisitor.id === id) {
            if (state.fsVisitor.context !== context) {
                state.log.debug("update visitor after re-render, but context is different (old vs new): vContext (" + JSON.stringify((_a = state.fsVisitor) === null || _a === void 0 ? void 0 : _a.context) + " vs " + JSON.stringify(context) + ")");
            }
            else {
                state.log.debug("update visitor after re-render");
            }
            newVisitorDetected = false;
            visitorInstance = fsSdk.updateVisitor(state.fsVisitor, context);
        }
        else {
            if (state === null || state === void 0 ? void 0 : state.fsVisitor) {
                state.log.debug("unable to update visitor after re-render because of strong update (old vs new): envId (" + ((_b = state.fsVisitor) === null || _b === void 0 ? void 0 : _b.envId) + " vs " + fsSdk.envId + ") or vId (" + ((_c = state.fsVisitor) === null || _c === void 0 ? void 0 : _c.id) + " vs " + id + ")");
            }
            visitorInstance = fsSdk.newVisitor(id, context);
            newVisitorDetected = true;
        }
        setState(function (s) { return (__assign(__assign({}, s), { status: __assign(__assign({}, s.status), { isVisitorDefined: !!visitorInstance, isLoading: true }), fsVisitor: visitorInstance, fsModifications: visitorInstance.fetchedModifications || null, fsSdk: fsSdk })); });
        visitorInstance.on('ready', function () {
            var firstInitSuccessOldValue = firstInitSuccess;
            setState(function (s) { return (__assign(__assign({}, s), { status: __assign(__assign({}, s.status), { isVisitorDefined: !!visitorInstance, isLoading: false, lastRefresh: new Date().toISOString(), firstInitSuccess: (!newVisitorDetected && s.status.firstInitSuccess) || new Date().toISOString() }), fsVisitor: visitorInstance, fsSdk: fsSdk, fsModifications: visitorInstance.fetchedModifications || null, private: {
                    previousFetchedModifications: visitorInstance.fetchedModifications || undefined
                } })); });
        });
        visitorInstance.on('saveCache', function (args) {
            if (onSavingModificationsInCache) {
                tryCatchCallback(function () { return onSavingModificationsInCache(args); });
            }
        });
    };
    if (!isJest && isServer && !isVisitorDefined) {
        state.log.debug("SDK run on server side detected.");
        var fsSdk_1 = initSdk();
        var visitorInstance_1 = fsSdk_1.newVisitor(id, context);
        setState(function (s) { return (__assign(__assign({}, s), { status: __assign(__assign({}, s.status), { isVisitorDefined: !!visitorInstance_1 }), fsVisitor: visitorInstance_1, fsModifications: visitorInstance_1.fetchedModifications || null, fsSdk: fsSdk_1 })); });
    }
    else if ((isJest || isNative || isBrowser) && !isVisitorDefined && firstInitSuccess === null) {
        var fsSdk = initSdk();
        postInitSdkForClientSide(fsSdk);
    }
    react_1.useEffect(function () {
        var _a;
        if (!isBrowser) {
            state.log.debug("useEffect triggered in an environment other than browser, SDK stopped.");
            return;
        }
        var previousBucketing = null;
        if (state.fsSdk && state.fsSdk.config.decisionMode === 'Bucketing') {
            state.fsSdk.stopBucketingPolling();
            state.log.info('Bucketing automatically stopped because a setting props from FlagshipProvider has changed. Bucketing will restart automatically if decisionMode is still "Bucketing"');
            state.fsSdk.eventEmitter.removeAllListeners();
            previousBucketing = ((_a = state.fsSdk.bucket) === null || _a === void 0 ? void 0 : _a.data) || null;
        }
        var fsSdk = initSdk(previousBucketing);
        postInitSdkForClientSide(fsSdk);
    }, [envId, id, JSON.stringify(configuration) + JSON.stringify(context)]);
    react_1.useEffect(function () {
        var isSdkReady = state.status.isVisitorDefined && state.status.firstInitSuccess !== null;
        if (onUpdate) {
            tryCatchCallback(function () {
                var _a;
                onUpdate({
                    status: __assign(__assign({}, state.status), { isSdkReady: isSdkReady }),
                    fsModifications: state.fsModifications,
                    config: __assign(__assign({}, state.config), (_a = state.fsVisitor) === null || _a === void 0 ? void 0 : _a.config)
                }, state.fsVisitor);
            });
        }
    }, [state === null || state === void 0 ? void 0 : state.config, state === null || state === void 0 ? void 0 : state.fsModifications, state.status.isVisitorDefined]);
    react_1.useEffect(function () {
        if (onInitDone && !!firstInitSuccess && firstInitSuccess === lastRefresh && !isLoading) {
            tryCatchCallback(onInitDone);
        }
    }, [state === null || state === void 0 ? void 0 : state.status]);
    var handleDisplay = function () {
        var isFirstInit = !fsVisitor || !firstInitSuccess;
        if (isLoading && loadingComponent && isFirstInit && fetchNow) {
            return react_1.default.createElement(react_1.default.Fragment, null, loadingComponent);
        }
        return react_1.default.createElement(react_1.default.Fragment, null, children);
    };
    var handleError = function (error) {
        state.log.fatal("error: " + error.stack);
        setError({ error: error, hasError: !!error });
    };
    return (react_1.default.createElement(FlagshipContext.Provider, { value: { state: state, setState: setState, hasError: errorData.hasError } }, enableSafeMode ? (react_1.default.createElement(FlagshipErrorBoundary_1.default, { customerChildren: children, onError: handleError, error: errorData.error, sdkSettings: configuration, handleDisplay: handleErrorDisplay, log: state.log }, handleDisplay())) : (handleDisplay())));
};
exports.FlagshipProvider.defaultProps = {
    loadingComponent: undefined,
    fetchNow: true,
    activateNow: false,
    decisionMode: 'API',
    pollingInterval: undefined,
    enableConsoleLogs: false,
    enableErrorLayout: false,
    enableSafeMode: false,
    nodeEnv: 'production',
    flagshipApi: undefined,
    apiKey: undefined,
    initialModifications: undefined,
    onInitStart: function () {
    },
    onInitDone: function () {
    },
    onSavingModificationsInCache: function () {
    },
    onUpdate: function () {
    }
};
exports.FlagshipConsumer = FlagshipContext.Consumer;
exports.default = FlagshipContext;
exports.useFlagshipContext = function () { return react_1.useContext(FlagshipContext); };
//# sourceMappingURL=FlagshipContext.js.map