import React, { SetStateAction, Dispatch } from 'react';
import { FlagshipSdkConfig, FlagshipVisitorContext, IFlagshipVisitor, SaveCacheArgs, DecisionApiCampaign, PostFlagshipApiCallback, BucketingApiResponse, IFlagship } from '@flagship.io/js-sdk';
import { FsLogger } from '@flagship.io/js-sdk-logs';
import { HandleErrorBoundaryDisplay } from './FlagshipErrorBoundary';
export declare type FsStatus = {
    isLoading: boolean;
    isSdkReady: boolean;
    isVisitorDefined: boolean;
    hasError: boolean;
    lastRefresh: string | null;
    firstInitSuccess: string | null;
};
export declare type FsState = {
    fsSdk: IFlagship | null;
    fsVisitor: IFlagshipVisitor | null;
    fsModifications: DecisionApiCampaign[] | null;
    status: FsStatus;
    log: FsLogger | null;
    private: {
        previousFetchedModifications: undefined | DecisionApiCampaign[];
    };
};
export interface FlagshipReactSdkConfig extends FlagshipSdkConfig {
    enableErrorLayout?: boolean;
    enableSafeMode?: boolean;
}
export declare const initState: FsState;
export declare type BucketingSuccessArgs = {
    status: string;
    payload: BucketingApiResponse;
};
declare const FlagshipContext: React.Context<{
    hasError: boolean;
    state: FsState;
    setState: Dispatch<SetStateAction<FsState>> | null;
}>;
export declare type FsOnUpdateArguments = {
    fsModifications: DecisionApiCampaign[] | null;
    config: FlagshipReactSdkConfig;
    status: FsStatus;
};
export declare type FsOnUpdate = (data: FsOnUpdateArguments, visitor: IFlagshipVisitor | null) => void;
interface FlagshipProviderProps {
    children: React.ReactNode;
    loadingComponent?: React.ReactNode;
    envId: string;
    visitorData: {
        id: string;
        context?: FlagshipVisitorContext;
    };
    reactNative?: {
        handleErrorDisplay: HandleErrorBoundaryDisplay;
        httpCallback: PostFlagshipApiCallback;
    };
    fetchNow?: boolean;
    decisionMode?: 'API' | 'Bucketing';
    pollingInterval?: number | null;
    activateNow?: boolean;
    enableConsoleLogs?: boolean;
    enableErrorLayout?: boolean;
    enableSafeMode?: boolean;
    nodeEnv?: string;
    timeout?: number;
    flagshipApi?: string;
    apiKey?: string | null;
    initialModifications?: DecisionApiCampaign[];
    initialBucketing?: BucketingApiResponse;
    onInitStart?(): void;
    onInitDone?(): void;
    onBucketingSuccess?(data: BucketingSuccessArgs): void;
    onBucketingFail?(error: Error): void;
    onSavingModificationsInCache?(args: SaveCacheArgs): void;
    onUpdate?: FsOnUpdate;
}
export declare const FlagshipProvider: React.SFC<FlagshipProviderProps>;
export declare const FlagshipConsumer: React.Consumer<{
    hasError: boolean;
    state: FsState;
    setState: Dispatch<SetStateAction<FsState>> | null;
}>;
export default FlagshipContext;
export declare const useFlagshipContext: () => any;
