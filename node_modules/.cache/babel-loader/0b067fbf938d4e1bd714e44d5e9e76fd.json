{"ast":null,"code":"global.Buffer = global.Buffer || require(\"buffer\").Buffer;\nconst createBuffer = Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow ? Buffer.from : // support for Node < 5.10\nval => new Buffer(val);\n/**\n * JS Implementation of MurmurHash2\n *\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n *\n * @param {Buffer} str ASCII only\n * @param {number} seed Positive integer only\n * @return {number} 32-bit positive integer hash\n */\n\nfunction MurmurHashV2(str, seed) {\n  if (!Buffer.isBuffer(str)) str = createBuffer(str);\n  var l = str.length,\n      h = seed ^ l,\n      i = 0,\n      k;\n\n  while (l >= 4) {\n    k = str[i] & 0xff | (str[++i] & 0xff) << 8 | (str[++i] & 0xff) << 16 | (str[++i] & 0xff) << 24;\n    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n    k ^= k >>> 24;\n    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n    h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16) ^ k;\n    l -= 4;\n    ++i;\n  }\n\n  switch (l) {\n    case 3:\n      h ^= (str[i + 2] & 0xff) << 16;\n\n    case 2:\n      h ^= (str[i + 1] & 0xff) << 8;\n\n    case 1:\n      h ^= str[i] & 0xff;\n      h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n  }\n\n  h ^= h >>> 13;\n  h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n  h ^= h >>> 15;\n  return h >>> 0;\n}\n/**\n * JS Implementation of MurmurHash3 (r136) (as of May 20, 2011)\n *\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n *\n * @param {Buffer} key ASCII only\n * @param {number} seed Positive integer only\n * @return {number} 32-bit positive integer hash\n */\n\n\nfunction MurmurHashV3(key, seed) {\n  if (!Buffer.isBuffer(key)) key = createBuffer(key);\n  var remainder, bytes, h1, h1b, c1, c1b, c2, c2b, k1, i;\n  remainder = key.length & 3; // key.length % 4\n\n  bytes = key.length - remainder;\n  h1 = seed;\n  c1 = 0xcc9e2d51;\n  c2 = 0x1b873593;\n  i = 0;\n\n  while (i < bytes) {\n    k1 = key[i] & 0xff | (key[++i] & 0xff) << 8 | (key[++i] & 0xff) << 16 | (key[++i] & 0xff) << 24;\n    ++i;\n    k1 = (k1 & 0xffff) * c1 + (((k1 >>> 16) * c1 & 0xffff) << 16) & 0xffffffff;\n    k1 = k1 << 15 | k1 >>> 17;\n    k1 = (k1 & 0xffff) * c2 + (((k1 >>> 16) * c2 & 0xffff) << 16) & 0xffffffff;\n    h1 ^= k1;\n    h1 = h1 << 13 | h1 >>> 19;\n    h1b = (h1 & 0xffff) * 5 + (((h1 >>> 16) * 5 & 0xffff) << 16) & 0xffffffff;\n    h1 = (h1b & 0xffff) + 0x6b64 + (((h1b >>> 16) + 0xe654 & 0xffff) << 16);\n  }\n\n  k1 = 0;\n\n  switch (remainder) {\n    case 3:\n      k1 ^= (key[i + 2] & 0xff) << 16;\n\n    case 2:\n      k1 ^= (key[i + 1] & 0xff) << 8;\n\n    case 1:\n      k1 ^= key[i] & 0xff;\n      k1 = (k1 & 0xffff) * c1 + (((k1 >>> 16) * c1 & 0xffff) << 16) & 0xffffffff;\n      k1 = k1 << 15 | k1 >>> 17;\n      k1 = (k1 & 0xffff) * c2 + (((k1 >>> 16) * c2 & 0xffff) << 16) & 0xffffffff;\n      h1 ^= k1;\n  }\n\n  h1 ^= key.length;\n  h1 ^= h1 >>> 16;\n  h1 = (h1 & 0xffff) * 0x85ebca6b + (((h1 >>> 16) * 0x85ebca6b & 0xffff) << 16) & 0xffffffff;\n  h1 ^= h1 >>> 13;\n  h1 = (h1 & 0xffff) * 0xc2b2ae35 + (((h1 >>> 16) * 0xc2b2ae35 & 0xffff) << 16) & 0xffffffff;\n  h1 ^= h1 >>> 16;\n  return h1 >>> 0;\n}\n\nconst murmur = {\n  MurmurHashV2,\n  MurmurHashV3\n};\nmodule.exports = murmur;","map":{"version":3,"sources":["/Users/angeloreinhardt/Desktop/FlagshipReact/node_modules/react-native-murmurhash/index.js"],"names":["global","Buffer","require","createBuffer","from","alloc","allocUnsafe","allocUnsafeSlow","val","MurmurHashV2","str","seed","isBuffer","l","length","h","i","k","MurmurHashV3","key","remainder","bytes","h1","h1b","c1","c1b","c2","c2b","k1","murmur","module","exports"],"mappings":"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","sourcesContent":["global.Buffer = global.Buffer || require(\"buffer\").Buffer;\nconst createBuffer =\n  Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow\n    ? Buffer.from\n    : // support for Node < 5.10\n      (val) => new Buffer(val);\n\n/**\n * JS Implementation of MurmurHash2\n *\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n *\n * @param {Buffer} str ASCII only\n * @param {number} seed Positive integer only\n * @return {number} 32-bit positive integer hash\n */\nfunction MurmurHashV2(str, seed) {\n  if (!Buffer.isBuffer(str)) str = createBuffer(str);\n  var l = str.length,\n    h = seed ^ l,\n    i = 0,\n    k;\n\n  while (l >= 4) {\n    k =\n      (str[i] & 0xff) |\n      ((str[++i] & 0xff) << 8) |\n      ((str[++i] & 0xff) << 16) |\n      ((str[++i] & 0xff) << 24);\n\n    k =\n      (k & 0xffff) * 0x5bd1e995 + ((((k >>> 16) * 0x5bd1e995) & 0xffff) << 16);\n    k ^= k >>> 24;\n    k =\n      (k & 0xffff) * 0x5bd1e995 + ((((k >>> 16) * 0x5bd1e995) & 0xffff) << 16);\n\n    h =\n      ((h & 0xffff) * 0x5bd1e995 +\n        ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16)) ^\n      k;\n\n    l -= 4;\n    ++i;\n  }\n\n  switch (l) {\n    case 3:\n      h ^= (str[i + 2] & 0xff) << 16;\n    case 2:\n      h ^= (str[i + 1] & 0xff) << 8;\n    case 1:\n      h ^= str[i] & 0xff;\n      h =\n        (h & 0xffff) * 0x5bd1e995 +\n        ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16);\n  }\n\n  h ^= h >>> 13;\n  h = (h & 0xffff) * 0x5bd1e995 + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16);\n  h ^= h >>> 15;\n\n  return h >>> 0;\n}\n\n/**\n * JS Implementation of MurmurHash3 (r136) (as of May 20, 2011)\n *\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n *\n * @param {Buffer} key ASCII only\n * @param {number} seed Positive integer only\n * @return {number} 32-bit positive integer hash\n */\nfunction MurmurHashV3(key, seed) {\n  if (!Buffer.isBuffer(key)) key = createBuffer(key);\n\n  var remainder, bytes, h1, h1b, c1, c1b, c2, c2b, k1, i;\n\n  remainder = key.length & 3; // key.length % 4\n  bytes = key.length - remainder;\n  h1 = seed;\n  c1 = 0xcc9e2d51;\n  c2 = 0x1b873593;\n  i = 0;\n\n  while (i < bytes) {\n    k1 =\n      (key[i] & 0xff) |\n      ((key[++i] & 0xff) << 8) |\n      ((key[++i] & 0xff) << 16) |\n      ((key[++i] & 0xff) << 24);\n    ++i;\n\n    k1 =\n      ((k1 & 0xffff) * c1 + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;\n    k1 = (k1 << 15) | (k1 >>> 17);\n    k1 =\n      ((k1 & 0xffff) * c2 + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;\n\n    h1 ^= k1;\n    h1 = (h1 << 13) | (h1 >>> 19);\n    h1b =\n      ((h1 & 0xffff) * 5 + ((((h1 >>> 16) * 5) & 0xffff) << 16)) & 0xffffffff;\n    h1 = (h1b & 0xffff) + 0x6b64 + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16);\n  }\n\n  k1 = 0;\n\n  switch (remainder) {\n    case 3:\n      k1 ^= (key[i + 2] & 0xff) << 16;\n    case 2:\n      k1 ^= (key[i + 1] & 0xff) << 8;\n    case 1:\n      k1 ^= key[i] & 0xff;\n\n      k1 =\n        ((k1 & 0xffff) * c1 + ((((k1 >>> 16) * c1) & 0xffff) << 16)) &\n        0xffffffff;\n      k1 = (k1 << 15) | (k1 >>> 17);\n      k1 =\n        ((k1 & 0xffff) * c2 + ((((k1 >>> 16) * c2) & 0xffff) << 16)) &\n        0xffffffff;\n      h1 ^= k1;\n  }\n\n  h1 ^= key.length;\n\n  h1 ^= h1 >>> 16;\n  h1 =\n    ((h1 & 0xffff) * 0x85ebca6b +\n      ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) &\n    0xffffffff;\n  h1 ^= h1 >>> 13;\n  h1 =\n    ((h1 & 0xffff) * 0xc2b2ae35 +\n      ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16)) &\n    0xffffffff;\n  h1 ^= h1 >>> 16;\n\n  return h1 >>> 0;\n}\n\nconst murmur = {\n  MurmurHashV2,\n  MurmurHashV3,\n};\n\nmodule.exports = murmur;\n"]},"metadata":{},"sourceType":"script"}